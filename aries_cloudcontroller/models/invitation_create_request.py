# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from aries_cloudcontroller.models.attachment_def import AttachmentDef


class InvitationCreateRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    InvitationCreateRequest - a model defined in OpenAPI

        accept: The accept of this InvitationCreateRequest [Optional].
        alias: The alias of this InvitationCreateRequest [Optional].
        attachments: The attachments of this InvitationCreateRequest [Optional].
        handshake_protocols: The handshake_protocols of this InvitationCreateRequest [Optional].
        mediation_id: The mediation_id of this InvitationCreateRequest [Optional].
        metadata: The metadata of this InvitationCreateRequest [Optional].
        my_label: The my_label of this InvitationCreateRequest [Optional].
        protocol_version: The protocol_version of this InvitationCreateRequest [Optional].
        use_public_did: The use_public_did of this InvitationCreateRequest [Optional].
    """

    accept: Optional[List[str]] = Field(alias="accept", default=None)
    alias: Optional[str] = Field(alias="alias", default=None)
    attachments: Optional[List[AttachmentDef]] = Field(alias="attachments", default=None)
    handshake_protocols: Optional[List[str]] = Field(alias="handshake_protocols", default=None)
    mediation_id: Optional[str] = Field(alias="mediation_id", default=None)
    metadata: Optional[Dict[str, Any]] = Field(alias="metadata", default=None)
    my_label: Optional[str] = Field(alias="my_label", default=None)
    protocol_version: Optional[str] = Field(alias="protocol_version", default=None)
    use_public_did: Optional[bool] = Field(alias="use_public_did", default=None)

    @validator("mediation_id")
    def mediation_id_pattern(cls, value):
        assert value is not None and re.match(r"[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}", value)
        return value

InvitationCreateRequest.update_forward_refs()
