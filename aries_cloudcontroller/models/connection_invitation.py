# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class ConnectionInvitation(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    ConnectionInvitation - a model defined in OpenAPI

        id: The id of this ConnectionInvitation [Optional].
        type: The type of this ConnectionInvitation [Optional].
        did: The did of this ConnectionInvitation [Optional].
        image_url: The image_url of this ConnectionInvitation [Optional].
        label: The label of this ConnectionInvitation [Optional].
        recipient_keys: The recipient_keys of this ConnectionInvitation [Optional].
        routing_keys: The routing_keys of this ConnectionInvitation [Optional].
        service_endpoint: The service_endpoint of this ConnectionInvitation [Optional].
    """

    id: Optional[str] = Field(alias="@id", default=None)
    type: Optional[str] = Field(alias="@type", default=None)
    did: Optional[str] = Field(alias="did", default=None)
    image_url: Optional[str] = Field(alias="imageUrl", default=None)
    label: Optional[str] = Field(alias="label", default=None)
    recipient_keys: Optional[List[str]] = Field(alias="recipientKeys", default=None)
    routing_keys: Optional[List[str]] = Field(alias="routingKeys", default=None)
    service_endpoint: Optional[str] = Field(alias="serviceEndpoint", default=None)

    @validator("did")
    def did_pattern(cls, value):
        assert value is not None and re.match(r"^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$", value)
        return value

ConnectionInvitation.update_forward_refs()
