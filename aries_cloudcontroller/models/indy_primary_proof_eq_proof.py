# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class IndyPrimaryProofEqProof(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    IndyPrimaryProofEqProof - a model defined in OpenAPI

        a_prime: The a_prime of this IndyPrimaryProofEqProof [Optional].
        e: The e of this IndyPrimaryProofEqProof [Optional].
        m: The m of this IndyPrimaryProofEqProof [Optional].
        m2: The m2 of this IndyPrimaryProofEqProof [Optional].
        revealed_attrs: The revealed_attrs of this IndyPrimaryProofEqProof [Optional].
        v: The v of this IndyPrimaryProofEqProof [Optional].
    """

    a_prime: Optional[str] = Field(alias="a_prime", default=None)
    e: Optional[str] = Field(alias="e", default=None)
    m: Optional[Dict[str, str]] = Field(alias="m", default=None)
    m2: Optional[str] = Field(alias="m2", default=None)
    revealed_attrs: Optional[Dict[str, str]] = Field(alias="revealed_attrs", default=None)
    v: Optional[str] = Field(alias="v", default=None)

    @validator("a_prime")
    def a_prime_pattern(cls, value):
        assert value is not None and re.match(r"^[0-9]*$", value)
        return value

    @validator("e")
    def e_pattern(cls, value):
        assert value is not None and re.match(r"^[0-9]*$", value)
        return value

    @validator("m2")
    def m2_pattern(cls, value):
        assert value is not None and re.match(r"^[0-9]*$", value)
        return value

    @validator("v")
    def v_pattern(cls, value):
        assert value is not None and re.match(r"^[0-9]*$", value)
        return value

IndyPrimaryProofEqProof.update_forward_refs()
