# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from aries_cloudcontroller.models.credential_proof import CredentialProof


class LDProofVCDetailCredential(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    LDProofVCDetailCredential - a model defined in OpenAPI

        context: The context of this LDProofVCDetailCredential.
        credential_subject: The credential_subject of this LDProofVCDetailCredential.
        expiration_date: The expiration_date of this LDProofVCDetailCredential [Optional].
        id: The id of this LDProofVCDetailCredential [Optional].
        issuance_date: The issuance_date of this LDProofVCDetailCredential.
        issuer: The issuer of this LDProofVCDetailCredential.
        proof: The proof of this LDProofVCDetailCredential [Optional].
        type: The type of this LDProofVCDetailCredential.
    """

    context: List[object] = Field(alias="@context")
    credential_subject: Dict[str, Any] = Field(alias="credentialSubject")
    expiration_date: Optional[str] = Field(alias="expirationDate", default=None)
    id: Optional[str] = Field(alias="id", default=None)
    issuance_date: str = Field(alias="issuanceDate")
    issuer: Dict[str, Any] = Field(alias="issuer")
    proof: Optional[CredentialProof] = Field(alias="proof", default=None)
    type: List[str] = Field(alias="type")

    @validator("expiration_date")
    def expiration_date_pattern(cls, value):
        assert value is not None and re.match(r"^([0-9]{4})-([0-9]{2})-([0-9]{2})([Tt ]([0-9]{2}):([0-9]{2}):([0-9]{2})(\.[0-9]+)?)?(([Zz]|([+-])([0-9]{2}):([0-9]{2})))?$", value)
        return value

    @validator("id")
    def id_pattern(cls, value):
        assert value is not None and re.match(r"\w+:(\\/?\\/?)[^\s]+", value)
        return value

    @validator("issuance_date")
    def issuance_date_pattern(cls, value):
        assert value is not None and re.match(r"^([0-9]{4})-([0-9]{2})-([0-9]{2})([Tt ]([0-9]{2}):([0-9]{2}):([0-9]{2})(\.[0-9]+)?)?(([Zz]|([+-])([0-9]{2}):([0-9]{2})))?$", value)
        return value

LDProofVCDetailCredential.update_forward_refs()
