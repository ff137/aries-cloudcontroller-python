# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from aries_cloudcontroller.models.indy_rev_reg_def_value import IndyRevRegDefValue


class IssuerRevRegRecordRevocRegDef(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    IssuerRevRegRecordRevocRegDef - a model defined in OpenAPI

        cred_def_id: The cred_def_id of this IssuerRevRegRecordRevocRegDef [Optional].
        id: The id of this IssuerRevRegRecordRevocRegDef [Optional].
        revoc_def_type: The revoc_def_type of this IssuerRevRegRecordRevocRegDef [Optional].
        tag: The tag of this IssuerRevRegRecordRevocRegDef [Optional].
        value: The value of this IssuerRevRegRecordRevocRegDef [Optional].
        ver: The ver of this IssuerRevRegRecordRevocRegDef [Optional].
    """

    cred_def_id: Optional[str] = Field(alias="credDefId", default=None)
    id: Optional[str] = Field(alias="id", default=None)
    revoc_def_type: Optional[str] = Field(alias="revocDefType", default=None)
    tag: Optional[str] = Field(alias="tag", default=None)
    value: Optional[IndyRevRegDefValue] = Field(alias="value", default=None)
    ver: Optional[str] = Field(alias="ver", default=None)

    @validator("cred_def_id")
    def cred_def_id_pattern(cls, value):
        assert value is not None and re.match(r"^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$", value)
        return value

    @validator("id")
    def id_pattern(cls, value):
        assert value is not None and re.match(r"^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)", value)
        return value

    @validator("ver")
    def ver_pattern(cls, value):
        assert value is not None and re.match(r"^[0-9.]+$", value)
        return value

IssuerRevRegRecordRevocRegDef.update_forward_refs()
